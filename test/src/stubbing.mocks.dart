// Mocks generated by Mockito 5.4.4 from annotations
// in smooth_sheets/test/src/stubbing.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;
import 'dart:ui' as _i6;

import 'package:flutter/cupertino.dart' as _i7;
import 'package:flutter/foundation.dart' as _i10;
import 'package:flutter/gestures.dart' as _i8;
import 'package:flutter/scheduler.dart' as _i11;
import 'package:flutter/src/animation/curves.dart' as _i15;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i16;
import 'package:smooth_sheets/src/foundation/sheet_activity.dart' as _i5;
import 'package:smooth_sheets/src/foundation/sheet_context.dart' as _i2;
import 'package:smooth_sheets/src/foundation/sheet_drag.dart' as _i12;
import 'package:smooth_sheets/src/foundation/sheet_gesture_tamperer.dart'
    as _i14;
import 'package:smooth_sheets/src/foundation/sheet_physics.dart' as _i3;
import 'package:smooth_sheets/src/foundation/sheet_position.dart' as _i4;
import 'package:smooth_sheets/src/foundation/sheet_status.dart' as _i13;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSheetContext_0 extends _i1.SmartFake implements _i2.SheetContext {
  _FakeSheetContext_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSheetPhysics_1 extends _i1.SmartFake implements _i3.SheetPhysics {
  _FakeSheetPhysics_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSheetActivity_2<T extends _i4.SheetPosition> extends _i1.SmartFake
    implements _i5.SheetActivity<T> {
  _FakeSheetActivity_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSheetMetrics_3 extends _i1.SmartFake implements _i4.SheetMetrics {
  _FakeSheetMetrics_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSheetAnchor_4 extends _i1.SmartFake implements _i4.SheetAnchor {
  _FakeSheetAnchor_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSize_5 extends _i1.SmartFake implements _i6.Size {
  _FakeSize_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEdgeInsets_6 extends _i1.SmartFake implements _i7.EdgeInsets {
  _FakeEdgeInsets_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDrag_7 extends _i1.SmartFake implements _i8.Drag {
  _FakeDrag_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTickerProvider_8 extends _i1.SmartFake
    implements _i7.TickerProvider {
  _FakeTickerProvider_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAnimation_9<T> extends _i1.SmartFake implements _i7.Animation<T> {
  _FakeAnimation_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTickerFuture_10 extends _i1.SmartFake implements _i7.TickerFuture {
  _FakeTickerFuture_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_11<T> extends _i1.SmartFake implements _i9.Future<T> {
  _FakeFuture_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDiagnosticsNode_12 extends _i1.SmartFake
    implements _i7.DiagnosticsNode {
  _FakeDiagnosticsNode_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({
    _i10.TextTreeConfiguration? parentConfiguration,
    _i7.DiagnosticLevel? minLevel = _i7.DiagnosticLevel.info,
  }) =>
      super.toString();
}

class _FakeTicker_13 extends _i1.SmartFake implements _i11.Ticker {
  _FakeTicker_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({bool? debugIncludeStack = false}) => super.toString();
}

/// A class which mocks [SheetPosition].
///
/// See the documentation for Mockito's code generation for more information.
class MockSheetPosition extends _i1.Mock implements _i4.SheetPosition {
  @override
  _i2.SheetContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeSheetContext_0(
          this,
          Invocation.getter(#context),
        ),
        returnValueForMissingStub: _FakeSheetContext_0(
          this,
          Invocation.getter(#context),
        ),
      ) as _i2.SheetContext);

  @override
  set currentDrag(_i12.SheetDragController? _currentDrag) => super.noSuchMethod(
        Invocation.setter(
          #currentDrag,
          _currentDrag,
        ),
        returnValueForMissingStub: null,
      );

  @override
  double get devicePixelRatio => (super.noSuchMethod(
        Invocation.getter(#devicePixelRatio),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  _i13.SheetStatus get status => (super.noSuchMethod(
        Invocation.getter(#status),
        returnValue: _i13.SheetStatus.stable,
        returnValueForMissingStub: _i13.SheetStatus.stable,
      ) as _i13.SheetStatus);

  @override
  _i3.SheetPhysics get physics => (super.noSuchMethod(
        Invocation.getter(#physics),
        returnValue: _FakeSheetPhysics_1(
          this,
          Invocation.getter(#physics),
        ),
        returnValueForMissingStub: _FakeSheetPhysics_1(
          this,
          Invocation.getter(#physics),
        ),
      ) as _i3.SheetPhysics);

  @override
  _i5.SheetActivity<_i4.SheetPosition> get activity => (super.noSuchMethod(
        Invocation.getter(#activity),
        returnValue: _FakeSheetActivity_2<_i4.SheetPosition>(
          this,
          Invocation.getter(#activity),
        ),
        returnValueForMissingStub: _FakeSheetActivity_2<_i4.SheetPosition>(
          this,
          Invocation.getter(#activity),
        ),
      ) as _i5.SheetActivity<_i4.SheetPosition>);

  @override
  _i4.SheetMetrics get snapshot => (super.noSuchMethod(
        Invocation.getter(#snapshot),
        returnValue: _FakeSheetMetrics_3(
          this,
          Invocation.getter(#snapshot),
        ),
        returnValueForMissingStub: _FakeSheetMetrics_3(
          this,
          Invocation.getter(#snapshot),
        ),
      ) as _i4.SheetMetrics);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  double get pixels => (super.noSuchMethod(
        Invocation.getter(#pixels),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  double get minPixels => (super.noSuchMethod(
        Invocation.getter(#minPixels),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  double get maxPixels => (super.noSuchMethod(
        Invocation.getter(#maxPixels),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  _i4.SheetAnchor get minPosition => (super.noSuchMethod(
        Invocation.getter(#minPosition),
        returnValue: _FakeSheetAnchor_4(
          this,
          Invocation.getter(#minPosition),
        ),
        returnValueForMissingStub: _FakeSheetAnchor_4(
          this,
          Invocation.getter(#minPosition),
        ),
      ) as _i4.SheetAnchor);

  @override
  _i4.SheetAnchor get maxPosition => (super.noSuchMethod(
        Invocation.getter(#maxPosition),
        returnValue: _FakeSheetAnchor_4(
          this,
          Invocation.getter(#maxPosition),
        ),
        returnValueForMissingStub: _FakeSheetAnchor_4(
          this,
          Invocation.getter(#maxPosition),
        ),
      ) as _i4.SheetAnchor);

  @override
  _i6.Size get contentSize => (super.noSuchMethod(
        Invocation.getter(#contentSize),
        returnValue: _FakeSize_5(
          this,
          Invocation.getter(#contentSize),
        ),
        returnValueForMissingStub: _FakeSize_5(
          this,
          Invocation.getter(#contentSize),
        ),
      ) as _i6.Size);

  @override
  _i6.Size get viewportSize => (super.noSuchMethod(
        Invocation.getter(#viewportSize),
        returnValue: _FakeSize_5(
          this,
          Invocation.getter(#viewportSize),
        ),
        returnValueForMissingStub: _FakeSize_5(
          this,
          Invocation.getter(#viewportSize),
        ),
      ) as _i6.Size);

  @override
  _i7.EdgeInsets get viewportInsets => (super.noSuchMethod(
        Invocation.getter(#viewportInsets),
        returnValue: _FakeEdgeInsets_6(
          this,
          Invocation.getter(#viewportInsets),
        ),
        returnValueForMissingStub: _FakeEdgeInsets_6(
          this,
          Invocation.getter(#viewportInsets),
        ),
      ) as _i7.EdgeInsets);

  @override
  double get viewPixels => (super.noSuchMethod(
        Invocation.getter(#viewPixels),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  double get minViewPixels => (super.noSuchMethod(
        Invocation.getter(#minViewPixels),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  double get maxViewPixels => (super.noSuchMethod(
        Invocation.getter(#maxViewPixels),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  bool get hasDimensions => (super.noSuchMethod(
        Invocation.getter(#hasDimensions),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isPixelsInBounds => (super.noSuchMethod(
        Invocation.getter(#isPixelsInBounds),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isPixelsOutOfBounds => (super.noSuchMethod(
        Invocation.getter(#isPixelsOutOfBounds),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void takeOver(_i4.SheetPosition? other) => super.noSuchMethod(
        Invocation.method(
          #takeOver,
          [other],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateGestureTamperer(_i14.SheetGestureProxyMixin? gestureTamperer) =>
      super.noSuchMethod(
        Invocation.method(
          #updateGestureTamperer,
          [gestureTamperer],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updatePhysics(_i3.SheetPhysics? physics) => super.noSuchMethod(
        Invocation.method(
          #updatePhysics,
          [physics],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void applyNewContentSize(_i6.Size? contentSize) => super.noSuchMethod(
        Invocation.method(
          #applyNewContentSize,
          [contentSize],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void applyNewViewportSize(_i6.Size? size) => super.noSuchMethod(
        Invocation.method(
          #applyNewViewportSize,
          [size],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void applyNewViewportInsets(_i7.EdgeInsets? insets) => super.noSuchMethod(
        Invocation.method(
          #applyNewViewportInsets,
          [insets],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void applyNewBoundaryConstraints(
    _i4.SheetAnchor? minPosition,
    _i4.SheetAnchor? maxPosition,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #applyNewBoundaryConstraints,
          [
            minPosition,
            maxPosition,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void finalizePosition() => super.noSuchMethod(
        Invocation.method(
          #finalizePosition,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void beginActivity(_i5.SheetActivity<_i4.SheetPosition>? activity) =>
      super.noSuchMethod(
        Invocation.method(
          #beginActivity,
          [activity],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void goIdle() => super.noSuchMethod(
        Invocation.method(
          #goIdle,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void goBallistic(double? velocity) => super.noSuchMethod(
        Invocation.method(
          #goBallistic,
          [velocity],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void goBallisticWith(_i7.Simulation? simulation) => super.noSuchMethod(
        Invocation.method(
          #goBallisticWith,
          [simulation],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void settleTo(
    _i4.SheetAnchor? detent,
    Duration? duration,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #settleTo,
          [
            detent,
            duration,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Drag drag(
    _i7.DragStartDetails? details,
    _i6.VoidCallback? dragCancelCallback,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #drag,
          [
            details,
            dragCancelCallback,
          ],
        ),
        returnValue: _FakeDrag_7(
          this,
          Invocation.method(
            #drag,
            [
              details,
              dragCancelCallback,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeDrag_7(
          this,
          Invocation.method(
            #drag,
            [
              details,
              dragCancelCallback,
            ],
          ),
        ),
      ) as _i8.Drag);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setPixels(double? pixels) => super.noSuchMethod(
        Invocation.method(
          #setPixels,
          [pixels],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void correctPixels(double? pixels) => super.noSuchMethod(
        Invocation.method(
          #correctPixels,
          [pixels],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<void> animateTo(
    _i4.SheetAnchor? newPosition, {
    _i7.Curve? curve = _i7.Curves.easeInOut,
    Duration? duration = const Duration(milliseconds: 300),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #animateTo,
          [newPosition],
          {
            #curve: curve,
            #duration: duration,
          },
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i4.SheetMetrics copyWith({
    double? pixels,
    _i4.SheetAnchor? minPosition,
    _i4.SheetAnchor? maxPosition,
    _i6.Size? contentSize,
    _i6.Size? viewportSize,
    _i7.EdgeInsets? viewportInsets,
    double? devicePixelRatio,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyWith,
          [],
          {
            #pixels: pixels,
            #minPosition: minPosition,
            #maxPosition: maxPosition,
            #contentSize: contentSize,
            #viewportSize: viewportSize,
            #viewportInsets: viewportInsets,
            #devicePixelRatio: devicePixelRatio,
          },
        ),
        returnValue: _FakeSheetMetrics_3(
          this,
          Invocation.method(
            #copyWith,
            [],
            {
              #pixels: pixels,
              #minPosition: minPosition,
              #maxPosition: maxPosition,
              #contentSize: contentSize,
              #viewportSize: viewportSize,
              #viewportInsets: viewportInsets,
              #devicePixelRatio: devicePixelRatio,
            },
          ),
        ),
        returnValueForMissingStub: _FakeSheetMetrics_3(
          this,
          Invocation.method(
            #copyWith,
            [],
            {
              #pixels: pixels,
              #minPosition: minPosition,
              #maxPosition: maxPosition,
              #contentSize: contentSize,
              #viewportSize: viewportSize,
              #viewportInsets: viewportInsets,
              #devicePixelRatio: devicePixelRatio,
            },
          ),
        ),
      ) as _i4.SheetMetrics);

  @override
  void didUpdateMetrics() => super.noSuchMethod(
        Invocation.method(
          #didUpdateMetrics,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didDragStart(_i12.SheetDragStartDetails? details) => super.noSuchMethod(
        Invocation.method(
          #didDragStart,
          [details],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didDragEnd(_i12.SheetDragEndDetails? details) => super.noSuchMethod(
        Invocation.method(
          #didDragEnd,
          [details],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didDragUpdateMetrics(_i12.SheetDragUpdateDetails? details) =>
      super.noSuchMethod(
        Invocation.method(
          #didDragUpdateMetrics,
          [details],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didDragCancel() => super.noSuchMethod(
        Invocation.method(
          #didDragCancel,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didOverflowBy(double? overflow) => super.noSuchMethod(
        Invocation.method(
          #didOverflowBy,
          [overflow],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SheetContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockSheetContext extends _i1.Mock implements _i2.SheetContext {
  @override
  _i7.TickerProvider get vsync => (super.noSuchMethod(
        Invocation.getter(#vsync),
        returnValue: _FakeTickerProvider_8(
          this,
          Invocation.getter(#vsync),
        ),
        returnValueForMissingStub: _FakeTickerProvider_8(
          this,
          Invocation.getter(#vsync),
        ),
      ) as _i7.TickerProvider);

  @override
  double get devicePixelRatio => (super.noSuchMethod(
        Invocation.getter(#devicePixelRatio),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
}

/// A class which mocks [AnimationController].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnimationController extends _i1.Mock
    implements _i7.AnimationController {
  @override
  double get lowerBound => (super.noSuchMethod(
        Invocation.getter(#lowerBound),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  double get upperBound => (super.noSuchMethod(
        Invocation.getter(#upperBound),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  _i7.AnimationBehavior get animationBehavior => (super.noSuchMethod(
        Invocation.getter(#animationBehavior),
        returnValue: _i7.AnimationBehavior.normal,
        returnValueForMissingStub: _i7.AnimationBehavior.normal,
      ) as _i7.AnimationBehavior);

  @override
  set duration(Duration? _duration) => super.noSuchMethod(
        Invocation.setter(
          #duration,
          _duration,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set reverseDuration(Duration? _reverseDuration) => super.noSuchMethod(
        Invocation.setter(
          #reverseDuration,
          _reverseDuration,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Animation<double> get view => (super.noSuchMethod(
        Invocation.getter(#view),
        returnValue: _FakeAnimation_9<double>(
          this,
          Invocation.getter(#view),
        ),
        returnValueForMissingStub: _FakeAnimation_9<double>(
          this,
          Invocation.getter(#view),
        ),
      ) as _i7.Animation<double>);

  @override
  double get value => (super.noSuchMethod(
        Invocation.getter(#value),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  set value(double? newValue) => super.noSuchMethod(
        Invocation.setter(
          #value,
          newValue,
        ),
        returnValueForMissingStub: null,
      );

  @override
  double get velocity => (super.noSuchMethod(
        Invocation.getter(#velocity),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  bool get isAnimating => (super.noSuchMethod(
        Invocation.getter(#isAnimating),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i7.AnimationStatus get status => (super.noSuchMethod(
        Invocation.getter(#status),
        returnValue: _i7.AnimationStatus.dismissed,
        returnValueForMissingStub: _i7.AnimationStatus.dismissed,
      ) as _i7.AnimationStatus);

  @override
  bool get isDismissed => (super.noSuchMethod(
        Invocation.getter(#isDismissed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isCompleted => (super.noSuchMethod(
        Invocation.getter(#isCompleted),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void resync(_i7.TickerProvider? vsync) => super.noSuchMethod(
        Invocation.method(
          #resync,
          [vsync],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void reset() => super.noSuchMethod(
        Invocation.method(
          #reset,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.TickerFuture forward({double? from}) => (super.noSuchMethod(
        Invocation.method(
          #forward,
          [],
          {#from: from},
        ),
        returnValue: _FakeTickerFuture_10(
          this,
          Invocation.method(
            #forward,
            [],
            {#from: from},
          ),
        ),
        returnValueForMissingStub: _FakeTickerFuture_10(
          this,
          Invocation.method(
            #forward,
            [],
            {#from: from},
          ),
        ),
      ) as _i7.TickerFuture);

  @override
  _i7.TickerFuture reverse({double? from}) => (super.noSuchMethod(
        Invocation.method(
          #reverse,
          [],
          {#from: from},
        ),
        returnValue: _FakeTickerFuture_10(
          this,
          Invocation.method(
            #reverse,
            [],
            {#from: from},
          ),
        ),
        returnValueForMissingStub: _FakeTickerFuture_10(
          this,
          Invocation.method(
            #reverse,
            [],
            {#from: from},
          ),
        ),
      ) as _i7.TickerFuture);

  @override
  _i7.TickerFuture animateTo(
    double? target, {
    Duration? duration,
    _i7.Curve? curve = _i15.Curves.linear,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #animateTo,
          [target],
          {
            #duration: duration,
            #curve: curve,
          },
        ),
        returnValue: _FakeTickerFuture_10(
          this,
          Invocation.method(
            #animateTo,
            [target],
            {
              #duration: duration,
              #curve: curve,
            },
          ),
        ),
        returnValueForMissingStub: _FakeTickerFuture_10(
          this,
          Invocation.method(
            #animateTo,
            [target],
            {
              #duration: duration,
              #curve: curve,
            },
          ),
        ),
      ) as _i7.TickerFuture);

  @override
  _i7.TickerFuture animateBack(
    double? target, {
    Duration? duration,
    _i7.Curve? curve = _i15.Curves.linear,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #animateBack,
          [target],
          {
            #duration: duration,
            #curve: curve,
          },
        ),
        returnValue: _FakeTickerFuture_10(
          this,
          Invocation.method(
            #animateBack,
            [target],
            {
              #duration: duration,
              #curve: curve,
            },
          ),
        ),
        returnValueForMissingStub: _FakeTickerFuture_10(
          this,
          Invocation.method(
            #animateBack,
            [target],
            {
              #duration: duration,
              #curve: curve,
            },
          ),
        ),
      ) as _i7.TickerFuture);

  @override
  _i7.TickerFuture repeat({
    double? min,
    double? max,
    bool? reverse = false,
    Duration? period,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #repeat,
          [],
          {
            #min: min,
            #max: max,
            #reverse: reverse,
            #period: period,
          },
        ),
        returnValue: _FakeTickerFuture_10(
          this,
          Invocation.method(
            #repeat,
            [],
            {
              #min: min,
              #max: max,
              #reverse: reverse,
              #period: period,
            },
          ),
        ),
        returnValueForMissingStub: _FakeTickerFuture_10(
          this,
          Invocation.method(
            #repeat,
            [],
            {
              #min: min,
              #max: max,
              #reverse: reverse,
              #period: period,
            },
          ),
        ),
      ) as _i7.TickerFuture);

  @override
  _i7.TickerFuture fling({
    double? velocity = 1.0,
    _i7.SpringDescription? springDescription,
    _i7.AnimationBehavior? animationBehavior,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fling,
          [],
          {
            #velocity: velocity,
            #springDescription: springDescription,
            #animationBehavior: animationBehavior,
          },
        ),
        returnValue: _FakeTickerFuture_10(
          this,
          Invocation.method(
            #fling,
            [],
            {
              #velocity: velocity,
              #springDescription: springDescription,
              #animationBehavior: animationBehavior,
            },
          ),
        ),
        returnValueForMissingStub: _FakeTickerFuture_10(
          this,
          Invocation.method(
            #fling,
            [],
            {
              #velocity: velocity,
              #springDescription: springDescription,
              #animationBehavior: animationBehavior,
            },
          ),
        ),
      ) as _i7.TickerFuture);

  @override
  _i7.TickerFuture animateWith(_i7.Simulation? simulation) =>
      (super.noSuchMethod(
        Invocation.method(
          #animateWith,
          [simulation],
        ),
        returnValue: _FakeTickerFuture_10(
          this,
          Invocation.method(
            #animateWith,
            [simulation],
          ),
        ),
        returnValueForMissingStub: _FakeTickerFuture_10(
          this,
          Invocation.method(
            #animateWith,
            [simulation],
          ),
        ),
      ) as _i7.TickerFuture);

  @override
  void stop({bool? canceled = true}) => super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
          {#canceled: canceled},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  String toStringDetails() => (super.noSuchMethod(
        Invocation.method(
          #toStringDetails,
          [],
        ),
        returnValue: _i16.dummyValue<String>(
          this,
          Invocation.method(
            #toStringDetails,
            [],
          ),
        ),
        returnValueForMissingStub: _i16.dummyValue<String>(
          this,
          Invocation.method(
            #toStringDetails,
            [],
          ),
        ),
      ) as String);

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addStatusListener(_i7.AnimationStatusListener? listener) =>
      super.noSuchMethod(
        Invocation.method(
          #addStatusListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeStatusListener(_i7.AnimationStatusListener? listener) =>
      super.noSuchMethod(
        Invocation.method(
          #removeStatusListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Animation<U> drive<U>(_i7.Animatable<U>? child) => (super.noSuchMethod(
        Invocation.method(
          #drive,
          [child],
        ),
        returnValue: _FakeAnimation_9<U>(
          this,
          Invocation.method(
            #drive,
            [child],
          ),
        ),
        returnValueForMissingStub: _FakeAnimation_9<U>(
          this,
          Invocation.method(
            #drive,
            [child],
          ),
        ),
      ) as _i7.Animation<U>);

  @override
  void didRegisterListener() => super.noSuchMethod(
        Invocation.method(
          #didRegisterListener,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didUnregisterListener() => super.noSuchMethod(
        Invocation.method(
          #didUnregisterListener,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearListeners() => super.noSuchMethod(
        Invocation.method(
          #clearListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearStatusListeners() => super.noSuchMethod(
        Invocation.method(
          #clearStatusListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyStatusListeners(_i7.AnimationStatus? status) => super.noSuchMethod(
        Invocation.method(
          #notifyStatusListeners,
          [status],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [TickerFuture].
///
/// See the documentation for Mockito's code generation for more information.
class MockTickerFuture extends _i1.Mock implements _i7.TickerFuture {
  @override
  _i9.Future<void> get orCancel => (super.noSuchMethod(
        Invocation.getter(#orCancel),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  void whenCompleteOrCancel(_i6.VoidCallback? callback) => super.noSuchMethod(
        Invocation.method(
          #whenCompleteOrCancel,
          [callback],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Stream<void> asStream() => (super.noSuchMethod(
        Invocation.method(
          #asStream,
          [],
        ),
        returnValue: _i9.Stream<void>.empty(),
        returnValueForMissingStub: _i9.Stream<void>.empty(),
      ) as _i9.Stream<void>);

  @override
  _i9.Future<void> catchError(
    Function? onError, {
    bool Function(Object)? test,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #catchError,
          [onError],
          {#test: test},
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<R> then<R>(
    _i9.FutureOr<R> Function(void)? onValue, {
    Function? onError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #then,
          [onValue],
          {#onError: onError},
        ),
        returnValue: _i16.ifNotNull(
              _i16.dummyValueOrNull<R>(
                this,
                Invocation.method(
                  #then,
                  [onValue],
                  {#onError: onError},
                ),
              ),
              (R v) => _i9.Future<R>.value(v),
            ) ??
            _FakeFuture_11<R>(
              this,
              Invocation.method(
                #then,
                [onValue],
                {#onError: onError},
              ),
            ),
        returnValueForMissingStub: _i16.ifNotNull(
              _i16.dummyValueOrNull<R>(
                this,
                Invocation.method(
                  #then,
                  [onValue],
                  {#onError: onError},
                ),
              ),
              (R v) => _i9.Future<R>.value(v),
            ) ??
            _FakeFuture_11<R>(
              this,
              Invocation.method(
                #then,
                [onValue],
                {#onError: onError},
              ),
            ),
      ) as _i9.Future<R>);

  @override
  _i9.Future<void> timeout(
    Duration? timeLimit, {
    _i9.FutureOr<void> Function()? onTimeout,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #timeout,
          [timeLimit],
          {#onTimeout: onTimeout},
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> whenComplete(dynamic Function()? action) =>
      (super.noSuchMethod(
        Invocation.method(
          #whenComplete,
          [action],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
}

/// A class which mocks [Ticker].
///
/// See the documentation for Mockito's code generation for more information.
class MockTicker extends _i1.Mock implements _i11.Ticker {
  @override
  bool get muted => (super.noSuchMethod(
        Invocation.getter(#muted),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set muted(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #muted,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isTicking => (super.noSuchMethod(
        Invocation.getter(#isTicking),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isActive => (super.noSuchMethod(
        Invocation.getter(#isActive),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get scheduled => (super.noSuchMethod(
        Invocation.getter(#scheduled),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get shouldScheduleTick => (super.noSuchMethod(
        Invocation.getter(#shouldScheduleTick),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i7.TickerFuture start() => (super.noSuchMethod(
        Invocation.method(
          #start,
          [],
        ),
        returnValue: _FakeTickerFuture_10(
          this,
          Invocation.method(
            #start,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeTickerFuture_10(
          this,
          Invocation.method(
            #start,
            [],
          ),
        ),
      ) as _i7.TickerFuture);

  @override
  _i7.DiagnosticsNode describeForError(String? name) => (super.noSuchMethod(
        Invocation.method(
          #describeForError,
          [name],
        ),
        returnValue: _FakeDiagnosticsNode_12(
          this,
          Invocation.method(
            #describeForError,
            [name],
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_12(
          this,
          Invocation.method(
            #describeForError,
            [name],
          ),
        ),
      ) as _i7.DiagnosticsNode);

  @override
  void stop({bool? canceled = false}) => super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
          {#canceled: canceled},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void scheduleTick({bool? rescheduling = false}) => super.noSuchMethod(
        Invocation.method(
          #scheduleTick,
          [],
          {#rescheduling: rescheduling},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void unscheduleTick() => super.noSuchMethod(
        Invocation.method(
          #unscheduleTick,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void absorbTicker(_i11.Ticker? originalTicker) => super.noSuchMethod(
        Invocation.method(
          #absorbTicker,
          [originalTicker],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  String toString({bool? debugIncludeStack = false}) => super.toString();
}

/// A class which mocks [TickerProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockTickerProvider extends _i1.Mock implements _i7.TickerProvider {
  @override
  _i11.Ticker createTicker(_i11.TickerCallback? onTick) => (super.noSuchMethod(
        Invocation.method(
          #createTicker,
          [onTick],
        ),
        returnValue: _FakeTicker_13(
          this,
          Invocation.method(
            #createTicker,
            [onTick],
          ),
        ),
        returnValueForMissingStub: _FakeTicker_13(
          this,
          Invocation.method(
            #createTicker,
            [onTick],
          ),
        ),
      ) as _i11.Ticker);
}
