// Mocks generated by Mockito 5.4.5 from annotations
// in smooth_sheets/test/src/stubbing.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i10;
import 'dart:ui' as _i4;

import 'package:flutter/cupertino.dart' as _i5;
import 'package:flutter/foundation.dart' as _i11;
import 'package:flutter/gestures.dart' as _i9;
import 'package:flutter/scheduler.dart' as _i12;
import 'package:flutter/src/animation/curves.dart' as _i16;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i17;
import 'package:smooth_sheets/src/foundation/sheet_activity.dart' as _i8;
import 'package:smooth_sheets/src/foundation/sheet_context.dart' as _i3;
import 'package:smooth_sheets/src/foundation/sheet_drag.dart' as _i13;
import 'package:smooth_sheets/src/foundation/sheet_gesture_tamperer.dart'
    as _i15;
import 'package:smooth_sheets/src/foundation/sheet_physics.dart' as _i6;
import 'package:smooth_sheets/src/foundation/sheet_position.dart' as _i2;
import 'package:smooth_sheets/src/foundation/sheet_status.dart' as _i14;
import 'package:smooth_sheets/src/foundation/snap_grid.dart' as _i7;
import 'package:smooth_sheets/src/paged/paged_sheet_route.dart' as _i18;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSheetAnchor_0 extends _i1.SmartFake implements _i2.SheetAnchor {
  _FakeSheetAnchor_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSheetContext_1 extends _i1.SmartFake implements _i3.SheetContext {
  _FakeSheetContext_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSheetGeometry_2 extends _i1.SmartFake implements _i2.SheetGeometry {
  _FakeSheetGeometry_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSheetMeasurements_3 extends _i1.SmartFake
    implements _i2.SheetMeasurements {
  _FakeSheetMeasurements_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSize_4 extends _i1.SmartFake implements _i4.Size {
  _FakeSize_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEdgeInsets_5 extends _i1.SmartFake implements _i5.EdgeInsets {
  _FakeEdgeInsets_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSheetPhysics_6 extends _i1.SmartFake implements _i6.SheetPhysics {
  _FakeSheetPhysics_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSnapGrid_7 extends _i1.SmartFake implements _i7.SnapGrid {
  _FakeSnapGrid_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSheetActivity_8<T extends _i2.SheetPosition> extends _i1.SmartFake
    implements _i8.SheetActivity<T> {
  _FakeSheetActivity_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSheetMetrics_9 extends _i1.SmartFake implements _i2.SheetMetrics {
  _FakeSheetMetrics_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDrag_10 extends _i1.SmartFake implements _i9.Drag {
  _FakeDrag_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTickerProvider_11 extends _i1.SmartFake
    implements _i5.TickerProvider {
  _FakeTickerProvider_11(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAnimation_12<T> extends _i1.SmartFake implements _i5.Animation<T> {
  _FakeAnimation_12(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTickerFuture_13 extends _i1.SmartFake implements _i5.TickerFuture {
  _FakeTickerFuture_13(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFuture_14<T> extends _i1.SmartFake implements _i10.Future<T> {
  _FakeFuture_14(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDiagnosticsNode_15 extends _i1.SmartFake
    implements _i5.DiagnosticsNode {
  _FakeDiagnosticsNode_15(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({
    _i11.TextTreeConfiguration? parentConfiguration,
    _i5.DiagnosticLevel? minLevel = _i5.DiagnosticLevel.info,
  }) => super.toString();
}

class _FakeTicker_16 extends _i1.SmartFake implements _i12.Ticker {
  _FakeTicker_16(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({bool? debugIncludeStack = false}) => super.toString();
}

class _FakeCurve_17 extends _i1.SmartFake implements _i5.Curve {
  _FakeCurve_17(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDuration_18 extends _i1.SmartFake implements Duration {
  _FakeDuration_18(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRouteSettings_19 extends _i1.SmartFake implements _i5.RouteSettings {
  _FakeRouteSettings_19(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeValueListenable_20<T1> extends _i1.SmartFake
    implements _i11.ValueListenable<T1> {
  _FakeValueListenable_20(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWidget_21 extends _i1.SmartFake implements _i5.Widget {
  _FakeWidget_21(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({_i5.DiagnosticLevel? minLevel = _i5.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeAnimationController_22 extends _i1.SmartFake
    implements _i5.AnimationController {
  _FakeAnimationController_22(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [SheetPosition].
///
/// See the documentation for Mockito's code generation for more information.
class MockSheetPosition extends _i1.Mock implements _i2.SheetPosition {
  @override
  _i2.SheetAnchor get initialPosition =>
      (super.noSuchMethod(
            Invocation.getter(#initialPosition),
            returnValue: _FakeSheetAnchor_0(
              this,
              Invocation.getter(#initialPosition),
            ),
            returnValueForMissingStub: _FakeSheetAnchor_0(
              this,
              Invocation.getter(#initialPosition),
            ),
          )
          as _i2.SheetAnchor);

  @override
  _i3.SheetContext get context =>
      (super.noSuchMethod(
            Invocation.getter(#context),
            returnValue: _FakeSheetContext_1(this, Invocation.getter(#context)),
            returnValueForMissingStub: _FakeSheetContext_1(
              this,
              Invocation.getter(#context),
            ),
          )
          as _i3.SheetContext);

  @override
  set currentDrag(_i13.SheetDragController? _currentDrag) => super.noSuchMethod(
    Invocation.setter(#currentDrag, _currentDrag),
    returnValueForMissingStub: null,
  );

  @override
  _i2.SheetGeometry get geometry =>
      (super.noSuchMethod(
            Invocation.getter(#geometry),
            returnValue: _FakeSheetGeometry_2(
              this,
              Invocation.getter(#geometry),
            ),
            returnValueForMissingStub: _FakeSheetGeometry_2(
              this,
              Invocation.getter(#geometry),
            ),
          )
          as _i2.SheetGeometry);

  @override
  set geometry(_i2.SheetGeometry? value) => super.noSuchMethod(
    Invocation.setter(#geometry, value),
    returnValueForMissingStub: null,
  );

  @override
  _i2.SheetMeasurements get measurements =>
      (super.noSuchMethod(
            Invocation.getter(#measurements),
            returnValue: _FakeSheetMeasurements_3(
              this,
              Invocation.getter(#measurements),
            ),
            returnValueForMissingStub: _FakeSheetMeasurements_3(
              this,
              Invocation.getter(#measurements),
            ),
          )
          as _i2.SheetMeasurements);

  @override
  set measurements(_i2.SheetMeasurements? value) => super.noSuchMethod(
    Invocation.setter(#measurements, value),
    returnValueForMissingStub: null,
  );

  @override
  double get maxOffset =>
      (super.noSuchMethod(
            Invocation.getter(#maxOffset),
            returnValue: 0.0,
            returnValueForMissingStub: 0.0,
          )
          as double);

  @override
  double get minOffset =>
      (super.noSuchMethod(
            Invocation.getter(#minOffset),
            returnValue: 0.0,
            returnValueForMissingStub: 0.0,
          )
          as double);

  @override
  double get offset =>
      (super.noSuchMethod(
            Invocation.getter(#offset),
            returnValue: 0.0,
            returnValueForMissingStub: 0.0,
          )
          as double);

  @override
  _i4.Size get contentSize =>
      (super.noSuchMethod(
            Invocation.getter(#contentSize),
            returnValue: _FakeSize_4(this, Invocation.getter(#contentSize)),
            returnValueForMissingStub: _FakeSize_4(
              this,
              Invocation.getter(#contentSize),
            ),
          )
          as _i4.Size);

  @override
  _i4.Size get viewportSize =>
      (super.noSuchMethod(
            Invocation.getter(#viewportSize),
            returnValue: _FakeSize_4(this, Invocation.getter(#viewportSize)),
            returnValueForMissingStub: _FakeSize_4(
              this,
              Invocation.getter(#viewportSize),
            ),
          )
          as _i4.Size);

  @override
  _i5.EdgeInsets get viewportInsets =>
      (super.noSuchMethod(
            Invocation.getter(#viewportInsets),
            returnValue: _FakeEdgeInsets_5(
              this,
              Invocation.getter(#viewportInsets),
            ),
            returnValueForMissingStub: _FakeEdgeInsets_5(
              this,
              Invocation.getter(#viewportInsets),
            ),
          )
          as _i5.EdgeInsets);

  @override
  double get devicePixelRatio =>
      (super.noSuchMethod(
            Invocation.getter(#devicePixelRatio),
            returnValue: 0.0,
            returnValueForMissingStub: 0.0,
          )
          as double);

  @override
  _i14.SheetStatus get status =>
      (super.noSuchMethod(
            Invocation.getter(#status),
            returnValue: _i14.SheetStatus.stable,
            returnValueForMissingStub: _i14.SheetStatus.stable,
          )
          as _i14.SheetStatus);

  @override
  bool get hasMetrics =>
      (super.noSuchMethod(
            Invocation.getter(#hasMetrics),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get shouldIgnorePointer =>
      (super.noSuchMethod(
            Invocation.getter(#shouldIgnorePointer),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i6.SheetPhysics get physics =>
      (super.noSuchMethod(
            Invocation.getter(#physics),
            returnValue: _FakeSheetPhysics_6(this, Invocation.getter(#physics)),
            returnValueForMissingStub: _FakeSheetPhysics_6(
              this,
              Invocation.getter(#physics),
            ),
          )
          as _i6.SheetPhysics);

  @override
  _i7.SnapGrid get snapGrid =>
      (super.noSuchMethod(
            Invocation.getter(#snapGrid),
            returnValue: _FakeSnapGrid_7(this, Invocation.getter(#snapGrid)),
            returnValueForMissingStub: _FakeSnapGrid_7(
              this,
              Invocation.getter(#snapGrid),
            ),
          )
          as _i7.SnapGrid);

  @override
  set snapGrid(_i7.SnapGrid? snapGrid) => super.noSuchMethod(
    Invocation.setter(#snapGrid, snapGrid),
    returnValueForMissingStub: null,
  );

  @override
  _i8.SheetActivity<_i2.SheetPosition> get activity =>
      (super.noSuchMethod(
            Invocation.getter(#activity),
            returnValue: _FakeSheetActivity_8<_i2.SheetPosition>(
              this,
              Invocation.getter(#activity),
            ),
            returnValueForMissingStub: _FakeSheetActivity_8<_i2.SheetPosition>(
              this,
              Invocation.getter(#activity),
            ),
          )
          as _i8.SheetActivity<_i2.SheetPosition>);

  @override
  _i2.SheetMetrics get snapshot =>
      (super.noSuchMethod(
            Invocation.getter(#snapshot),
            returnValue: _FakeSheetMetrics_9(
              this,
              Invocation.getter(#snapshot),
            ),
            returnValueForMissingStub: _FakeSheetMetrics_9(
              this,
              Invocation.getter(#snapshot),
            ),
          )
          as _i2.SheetMetrics);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(
            Invocation.getter(#hasListeners),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isPixelsInBounds =>
      (super.noSuchMethod(
            Invocation.getter(#isPixelsInBounds),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isPixelsOutOfBounds =>
      (super.noSuchMethod(
            Invocation.getter(#isPixelsOutOfBounds),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  double get viewOffset =>
      (super.noSuchMethod(
            Invocation.getter(#viewOffset),
            returnValue: 0.0,
            returnValueForMissingStub: 0.0,
          )
          as double);

  @override
  void takeOver(_i2.SheetPosition? other) => super.noSuchMethod(
    Invocation.method(#takeOver, [other]),
    returnValueForMissingStub: null,
  );

  @override
  void updateGestureTamperer(_i15.SheetGestureProxyMixin? gestureTamperer) =>
      super.noSuchMethod(
        Invocation.method(#updateGestureTamperer, [gestureTamperer]),
        returnValueForMissingStub: null,
      );

  @override
  void updatePhysics(_i6.SheetPhysics? physics) => super.noSuchMethod(
    Invocation.method(#updatePhysics, [physics]),
    returnValueForMissingStub: null,
  );

  @override
  void didChangeMeasurements(_i2.SheetMeasurements? oldMeasurements) =>
      super.noSuchMethod(
        Invocation.method(#didChangeMeasurements, [oldMeasurements]),
        returnValueForMissingStub: null,
      );

  @override
  void beginActivity(_i8.SheetActivity<_i2.SheetPosition>? activity) =>
      super.noSuchMethod(
        Invocation.method(#beginActivity, [activity]),
        returnValueForMissingStub: null,
      );

  @override
  void goIdle() => super.noSuchMethod(
    Invocation.method(#goIdle, []),
    returnValueForMissingStub: null,
  );

  @override
  void goBallistic(double? velocity) => super.noSuchMethod(
    Invocation.method(#goBallistic, [velocity]),
    returnValueForMissingStub: null,
  );

  @override
  void goBallisticWith(_i5.Simulation? simulation) => super.noSuchMethod(
    Invocation.method(#goBallisticWith, [simulation]),
    returnValueForMissingStub: null,
  );

  @override
  void settleTo(_i2.SheetAnchor? offset, Duration? duration) =>
      super.noSuchMethod(
        Invocation.method(#settleTo, [offset, duration]),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Drag drag(
    _i5.DragStartDetails? details,
    _i4.VoidCallback? dragCancelCallback,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#drag, [details, dragCancelCallback]),
            returnValue: _FakeDrag_10(
              this,
              Invocation.method(#drag, [details, dragCancelCallback]),
            ),
            returnValueForMissingStub: _FakeDrag_10(
              this,
              Invocation.method(#drag, [details, dragCancelCallback]),
            ),
          )
          as _i9.Drag);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void setPixels(double? pixels) => super.noSuchMethod(
    Invocation.method(#setPixels, [pixels]),
    returnValueForMissingStub: null,
  );

  @override
  _i10.Future<void> animateTo(
    _i2.SheetAnchor? newPosition, {
    _i5.Curve? curve = _i5.Curves.easeInOut,
    Duration? duration = const Duration(milliseconds: 300),
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #animateTo,
              [newPosition],
              {#curve: curve, #duration: duration},
            ),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i2.SheetMetrics copyWith({
    double? offset,
    double? minOffset,
    double? maxOffset,
    _i4.Size? contentSize,
    _i4.Size? viewportSize,
    _i5.EdgeInsets? viewportInsets,
    double? devicePixelRatio,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#copyWith, [], {
              #offset: offset,
              #minOffset: minOffset,
              #maxOffset: maxOffset,
              #contentSize: contentSize,
              #viewportSize: viewportSize,
              #viewportInsets: viewportInsets,
              #devicePixelRatio: devicePixelRatio,
            }),
            returnValue: _FakeSheetMetrics_9(
              this,
              Invocation.method(#copyWith, [], {
                #offset: offset,
                #minOffset: minOffset,
                #maxOffset: maxOffset,
                #contentSize: contentSize,
                #viewportSize: viewportSize,
                #viewportInsets: viewportInsets,
                #devicePixelRatio: devicePixelRatio,
              }),
            ),
            returnValueForMissingStub: _FakeSheetMetrics_9(
              this,
              Invocation.method(#copyWith, [], {
                #offset: offset,
                #minOffset: minOffset,
                #maxOffset: maxOffset,
                #contentSize: contentSize,
                #viewportSize: viewportSize,
                #viewportInsets: viewportInsets,
                #devicePixelRatio: devicePixelRatio,
              }),
            ),
          )
          as _i2.SheetMetrics);

  @override
  void didUpdateMetrics() => super.noSuchMethod(
    Invocation.method(#didUpdateMetrics, []),
    returnValueForMissingStub: null,
  );

  @override
  void didDragStart(_i13.SheetDragStartDetails? details) => super.noSuchMethod(
    Invocation.method(#didDragStart, [details]),
    returnValueForMissingStub: null,
  );

  @override
  void didDragEnd(_i13.SheetDragEndDetails? details) => super.noSuchMethod(
    Invocation.method(#didDragEnd, [details]),
    returnValueForMissingStub: null,
  );

  @override
  void didDragUpdateMetrics(_i13.SheetDragUpdateDetails? details) =>
      super.noSuchMethod(
        Invocation.method(#didDragUpdateMetrics, [details]),
        returnValueForMissingStub: null,
      );

  @override
  void didDragCancel() => super.noSuchMethod(
    Invocation.method(#didDragCancel, []),
    returnValueForMissingStub: null,
  );

  @override
  void didOverflowBy(double? overflow) => super.noSuchMethod(
    Invocation.method(#didOverflowBy, [overflow]),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i4.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i4.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [SheetContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockSheetContext extends _i1.Mock implements _i3.SheetContext {
  @override
  _i5.TickerProvider get vsync =>
      (super.noSuchMethod(
            Invocation.getter(#vsync),
            returnValue: _FakeTickerProvider_11(
              this,
              Invocation.getter(#vsync),
            ),
            returnValueForMissingStub: _FakeTickerProvider_11(
              this,
              Invocation.getter(#vsync),
            ),
          )
          as _i5.TickerProvider);

  @override
  double get devicePixelRatio =>
      (super.noSuchMethod(
            Invocation.getter(#devicePixelRatio),
            returnValue: 0.0,
            returnValueForMissingStub: 0.0,
          )
          as double);
}

/// A class which mocks [SheetMetrics].
///
/// See the documentation for Mockito's code generation for more information.
class MockSheetMetrics extends _i1.Mock implements _i2.SheetMetrics {
  @override
  double get devicePixelRatio =>
      (super.noSuchMethod(
            Invocation.getter(#devicePixelRatio),
            returnValue: 0.0,
            returnValueForMissingStub: 0.0,
          )
          as double);

  @override
  double get offset =>
      (super.noSuchMethod(
            Invocation.getter(#offset),
            returnValue: 0.0,
            returnValueForMissingStub: 0.0,
          )
          as double);

  @override
  double get minOffset =>
      (super.noSuchMethod(
            Invocation.getter(#minOffset),
            returnValue: 0.0,
            returnValueForMissingStub: 0.0,
          )
          as double);

  @override
  double get maxOffset =>
      (super.noSuchMethod(
            Invocation.getter(#maxOffset),
            returnValue: 0.0,
            returnValueForMissingStub: 0.0,
          )
          as double);

  @override
  _i4.Size get contentSize =>
      (super.noSuchMethod(
            Invocation.getter(#contentSize),
            returnValue: _FakeSize_4(this, Invocation.getter(#contentSize)),
            returnValueForMissingStub: _FakeSize_4(
              this,
              Invocation.getter(#contentSize),
            ),
          )
          as _i4.Size);

  @override
  _i4.Size get viewportSize =>
      (super.noSuchMethod(
            Invocation.getter(#viewportSize),
            returnValue: _FakeSize_4(this, Invocation.getter(#viewportSize)),
            returnValueForMissingStub: _FakeSize_4(
              this,
              Invocation.getter(#viewportSize),
            ),
          )
          as _i4.Size);

  @override
  _i5.EdgeInsets get viewportInsets =>
      (super.noSuchMethod(
            Invocation.getter(#viewportInsets),
            returnValue: _FakeEdgeInsets_5(
              this,
              Invocation.getter(#viewportInsets),
            ),
            returnValueForMissingStub: _FakeEdgeInsets_5(
              this,
              Invocation.getter(#viewportInsets),
            ),
          )
          as _i5.EdgeInsets);

  @override
  bool get isPixelsInBounds =>
      (super.noSuchMethod(
            Invocation.getter(#isPixelsInBounds),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isPixelsOutOfBounds =>
      (super.noSuchMethod(
            Invocation.getter(#isPixelsOutOfBounds),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  double get viewOffset =>
      (super.noSuchMethod(
            Invocation.getter(#viewOffset),
            returnValue: 0.0,
            returnValueForMissingStub: 0.0,
          )
          as double);

  @override
  _i2.SheetMetrics copyWith({
    double? offset,
    double? minOffset,
    double? maxOffset,
    _i4.Size? contentSize,
    _i4.Size? viewportSize,
    _i5.EdgeInsets? viewportInsets,
    double? devicePixelRatio,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#copyWith, [], {
              #offset: offset,
              #minOffset: minOffset,
              #maxOffset: maxOffset,
              #contentSize: contentSize,
              #viewportSize: viewportSize,
              #viewportInsets: viewportInsets,
              #devicePixelRatio: devicePixelRatio,
            }),
            returnValue: _FakeSheetMetrics_9(
              this,
              Invocation.method(#copyWith, [], {
                #offset: offset,
                #minOffset: minOffset,
                #maxOffset: maxOffset,
                #contentSize: contentSize,
                #viewportSize: viewportSize,
                #viewportInsets: viewportInsets,
                #devicePixelRatio: devicePixelRatio,
              }),
            ),
            returnValueForMissingStub: _FakeSheetMetrics_9(
              this,
              Invocation.method(#copyWith, [], {
                #offset: offset,
                #minOffset: minOffset,
                #maxOffset: maxOffset,
                #contentSize: contentSize,
                #viewportSize: viewportSize,
                #viewportInsets: viewportInsets,
                #devicePixelRatio: devicePixelRatio,
              }),
            ),
          )
          as _i2.SheetMetrics);
}

/// A class which mocks [AnimationController].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnimationController extends _i1.Mock
    implements _i5.AnimationController {
  @override
  double get lowerBound =>
      (super.noSuchMethod(
            Invocation.getter(#lowerBound),
            returnValue: 0.0,
            returnValueForMissingStub: 0.0,
          )
          as double);

  @override
  double get upperBound =>
      (super.noSuchMethod(
            Invocation.getter(#upperBound),
            returnValue: 0.0,
            returnValueForMissingStub: 0.0,
          )
          as double);

  @override
  _i5.AnimationBehavior get animationBehavior =>
      (super.noSuchMethod(
            Invocation.getter(#animationBehavior),
            returnValue: _i5.AnimationBehavior.normal,
            returnValueForMissingStub: _i5.AnimationBehavior.normal,
          )
          as _i5.AnimationBehavior);

  @override
  set duration(Duration? _duration) => super.noSuchMethod(
    Invocation.setter(#duration, _duration),
    returnValueForMissingStub: null,
  );

  @override
  set reverseDuration(Duration? _reverseDuration) => super.noSuchMethod(
    Invocation.setter(#reverseDuration, _reverseDuration),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Animation<double> get view =>
      (super.noSuchMethod(
            Invocation.getter(#view),
            returnValue: _FakeAnimation_12<double>(
              this,
              Invocation.getter(#view),
            ),
            returnValueForMissingStub: _FakeAnimation_12<double>(
              this,
              Invocation.getter(#view),
            ),
          )
          as _i5.Animation<double>);

  @override
  double get value =>
      (super.noSuchMethod(
            Invocation.getter(#value),
            returnValue: 0.0,
            returnValueForMissingStub: 0.0,
          )
          as double);

  @override
  set value(double? newValue) => super.noSuchMethod(
    Invocation.setter(#value, newValue),
    returnValueForMissingStub: null,
  );

  @override
  double get velocity =>
      (super.noSuchMethod(
            Invocation.getter(#velocity),
            returnValue: 0.0,
            returnValueForMissingStub: 0.0,
          )
          as double);

  @override
  bool get isAnimating =>
      (super.noSuchMethod(
            Invocation.getter(#isAnimating),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i5.AnimationStatus get status =>
      (super.noSuchMethod(
            Invocation.getter(#status),
            returnValue: _i5.AnimationStatus.dismissed,
            returnValueForMissingStub: _i5.AnimationStatus.dismissed,
          )
          as _i5.AnimationStatus);

  @override
  bool get isDismissed =>
      (super.noSuchMethod(
            Invocation.getter(#isDismissed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isCompleted =>
      (super.noSuchMethod(
            Invocation.getter(#isCompleted),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isForwardOrCompleted =>
      (super.noSuchMethod(
            Invocation.getter(#isForwardOrCompleted),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void resync(_i5.TickerProvider? vsync) => super.noSuchMethod(
    Invocation.method(#resync, [vsync]),
    returnValueForMissingStub: null,
  );

  @override
  void reset() => super.noSuchMethod(
    Invocation.method(#reset, []),
    returnValueForMissingStub: null,
  );

  @override
  _i5.TickerFuture forward({double? from}) =>
      (super.noSuchMethod(
            Invocation.method(#forward, [], {#from: from}),
            returnValue: _FakeTickerFuture_13(
              this,
              Invocation.method(#forward, [], {#from: from}),
            ),
            returnValueForMissingStub: _FakeTickerFuture_13(
              this,
              Invocation.method(#forward, [], {#from: from}),
            ),
          )
          as _i5.TickerFuture);

  @override
  _i5.TickerFuture reverse({double? from}) =>
      (super.noSuchMethod(
            Invocation.method(#reverse, [], {#from: from}),
            returnValue: _FakeTickerFuture_13(
              this,
              Invocation.method(#reverse, [], {#from: from}),
            ),
            returnValueForMissingStub: _FakeTickerFuture_13(
              this,
              Invocation.method(#reverse, [], {#from: from}),
            ),
          )
          as _i5.TickerFuture);

  @override
  _i5.TickerFuture toggle({double? from}) =>
      (super.noSuchMethod(
            Invocation.method(#toggle, [], {#from: from}),
            returnValue: _FakeTickerFuture_13(
              this,
              Invocation.method(#toggle, [], {#from: from}),
            ),
            returnValueForMissingStub: _FakeTickerFuture_13(
              this,
              Invocation.method(#toggle, [], {#from: from}),
            ),
          )
          as _i5.TickerFuture);

  @override
  _i5.TickerFuture animateTo(
    double? target, {
    Duration? duration,
    _i5.Curve? curve = _i16.Curves.linear,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #animateTo,
              [target],
              {#duration: duration, #curve: curve},
            ),
            returnValue: _FakeTickerFuture_13(
              this,
              Invocation.method(
                #animateTo,
                [target],
                {#duration: duration, #curve: curve},
              ),
            ),
            returnValueForMissingStub: _FakeTickerFuture_13(
              this,
              Invocation.method(
                #animateTo,
                [target],
                {#duration: duration, #curve: curve},
              ),
            ),
          )
          as _i5.TickerFuture);

  @override
  _i5.TickerFuture animateBack(
    double? target, {
    Duration? duration,
    _i5.Curve? curve = _i16.Curves.linear,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #animateBack,
              [target],
              {#duration: duration, #curve: curve},
            ),
            returnValue: _FakeTickerFuture_13(
              this,
              Invocation.method(
                #animateBack,
                [target],
                {#duration: duration, #curve: curve},
              ),
            ),
            returnValueForMissingStub: _FakeTickerFuture_13(
              this,
              Invocation.method(
                #animateBack,
                [target],
                {#duration: duration, #curve: curve},
              ),
            ),
          )
          as _i5.TickerFuture);

  @override
  _i5.TickerFuture repeat({
    double? min,
    double? max,
    bool? reverse = false,
    Duration? period,
    int? count,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#repeat, [], {
              #min: min,
              #max: max,
              #reverse: reverse,
              #period: period,
              #count: count,
            }),
            returnValue: _FakeTickerFuture_13(
              this,
              Invocation.method(#repeat, [], {
                #min: min,
                #max: max,
                #reverse: reverse,
                #period: period,
                #count: count,
              }),
            ),
            returnValueForMissingStub: _FakeTickerFuture_13(
              this,
              Invocation.method(#repeat, [], {
                #min: min,
                #max: max,
                #reverse: reverse,
                #period: period,
                #count: count,
              }),
            ),
          )
          as _i5.TickerFuture);

  @override
  _i5.TickerFuture fling({
    double? velocity = 1.0,
    _i5.SpringDescription? springDescription,
    _i5.AnimationBehavior? animationBehavior,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#fling, [], {
              #velocity: velocity,
              #springDescription: springDescription,
              #animationBehavior: animationBehavior,
            }),
            returnValue: _FakeTickerFuture_13(
              this,
              Invocation.method(#fling, [], {
                #velocity: velocity,
                #springDescription: springDescription,
                #animationBehavior: animationBehavior,
              }),
            ),
            returnValueForMissingStub: _FakeTickerFuture_13(
              this,
              Invocation.method(#fling, [], {
                #velocity: velocity,
                #springDescription: springDescription,
                #animationBehavior: animationBehavior,
              }),
            ),
          )
          as _i5.TickerFuture);

  @override
  _i5.TickerFuture animateWith(_i5.Simulation? simulation) =>
      (super.noSuchMethod(
            Invocation.method(#animateWith, [simulation]),
            returnValue: _FakeTickerFuture_13(
              this,
              Invocation.method(#animateWith, [simulation]),
            ),
            returnValueForMissingStub: _FakeTickerFuture_13(
              this,
              Invocation.method(#animateWith, [simulation]),
            ),
          )
          as _i5.TickerFuture);

  @override
  void stop({bool? canceled = true}) => super.noSuchMethod(
    Invocation.method(#stop, [], {#canceled: canceled}),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  String toStringDetails() =>
      (super.noSuchMethod(
            Invocation.method(#toStringDetails, []),
            returnValue: _i17.dummyValue<String>(
              this,
              Invocation.method(#toStringDetails, []),
            ),
            returnValueForMissingStub: _i17.dummyValue<String>(
              this,
              Invocation.method(#toStringDetails, []),
            ),
          )
          as String);

  @override
  void addListener(_i4.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i4.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void addStatusListener(_i5.AnimationStatusListener? listener) =>
      super.noSuchMethod(
        Invocation.method(#addStatusListener, [listener]),
        returnValueForMissingStub: null,
      );

  @override
  void removeStatusListener(_i5.AnimationStatusListener? listener) =>
      super.noSuchMethod(
        Invocation.method(#removeStatusListener, [listener]),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Animation<U> drive<U>(_i5.Animatable<U>? child) =>
      (super.noSuchMethod(
            Invocation.method(#drive, [child]),
            returnValue: _FakeAnimation_12<U>(
              this,
              Invocation.method(#drive, [child]),
            ),
            returnValueForMissingStub: _FakeAnimation_12<U>(
              this,
              Invocation.method(#drive, [child]),
            ),
          )
          as _i5.Animation<U>);

  @override
  void didRegisterListener() => super.noSuchMethod(
    Invocation.method(#didRegisterListener, []),
    returnValueForMissingStub: null,
  );

  @override
  void didUnregisterListener() => super.noSuchMethod(
    Invocation.method(#didUnregisterListener, []),
    returnValueForMissingStub: null,
  );

  @override
  void clearListeners() => super.noSuchMethod(
    Invocation.method(#clearListeners, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );

  @override
  void clearStatusListeners() => super.noSuchMethod(
    Invocation.method(#clearStatusListeners, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyStatusListeners(_i5.AnimationStatus? status) => super.noSuchMethod(
    Invocation.method(#notifyStatusListeners, [status]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [TickerFuture].
///
/// See the documentation for Mockito's code generation for more information.
class MockTickerFuture extends _i1.Mock implements _i5.TickerFuture {
  @override
  _i10.Future<void> get orCancel =>
      (super.noSuchMethod(
            Invocation.getter(#orCancel),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  void whenCompleteOrCancel(_i4.VoidCallback? callback) => super.noSuchMethod(
    Invocation.method(#whenCompleteOrCancel, [callback]),
    returnValueForMissingStub: null,
  );

  @override
  _i10.Stream<void> asStream() =>
      (super.noSuchMethod(
            Invocation.method(#asStream, []),
            returnValue: _i10.Stream<void>.empty(),
            returnValueForMissingStub: _i10.Stream<void>.empty(),
          )
          as _i10.Stream<void>);

  @override
  _i10.Future<void> catchError(
    Function? onError, {
    bool Function(Object)? test,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#catchError, [onError], {#test: test}),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<R> then<R>(
    _i10.FutureOr<R> Function(void)? onValue, {
    Function? onError,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#then, [onValue], {#onError: onError}),
            returnValue:
                _i17.ifNotNull(
                  _i17.dummyValueOrNull<R>(
                    this,
                    Invocation.method(#then, [onValue], {#onError: onError}),
                  ),
                  (R v) => _i10.Future<R>.value(v),
                ) ??
                _FakeFuture_14<R>(
                  this,
                  Invocation.method(#then, [onValue], {#onError: onError}),
                ),
            returnValueForMissingStub:
                _i17.ifNotNull(
                  _i17.dummyValueOrNull<R>(
                    this,
                    Invocation.method(#then, [onValue], {#onError: onError}),
                  ),
                  (R v) => _i10.Future<R>.value(v),
                ) ??
                _FakeFuture_14<R>(
                  this,
                  Invocation.method(#then, [onValue], {#onError: onError}),
                ),
          )
          as _i10.Future<R>);

  @override
  _i10.Future<void> timeout(
    Duration? timeLimit, {
    _i10.FutureOr<void> Function()? onTimeout,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#timeout, [timeLimit], {#onTimeout: onTimeout}),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> whenComplete(dynamic Function()? action) =>
      (super.noSuchMethod(
            Invocation.method(#whenComplete, [action]),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);
}

/// A class which mocks [Ticker].
///
/// See the documentation for Mockito's code generation for more information.
class MockTicker extends _i1.Mock implements _i12.Ticker {
  @override
  bool get muted =>
      (super.noSuchMethod(
            Invocation.getter(#muted),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  set muted(bool? value) => super.noSuchMethod(
    Invocation.setter(#muted, value),
    returnValueForMissingStub: null,
  );

  @override
  bool get isTicking =>
      (super.noSuchMethod(
            Invocation.getter(#isTicking),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isActive =>
      (super.noSuchMethod(
            Invocation.getter(#isActive),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get scheduled =>
      (super.noSuchMethod(
            Invocation.getter(#scheduled),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get shouldScheduleTick =>
      (super.noSuchMethod(
            Invocation.getter(#shouldScheduleTick),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i5.TickerFuture start() =>
      (super.noSuchMethod(
            Invocation.method(#start, []),
            returnValue: _FakeTickerFuture_13(
              this,
              Invocation.method(#start, []),
            ),
            returnValueForMissingStub: _FakeTickerFuture_13(
              this,
              Invocation.method(#start, []),
            ),
          )
          as _i5.TickerFuture);

  @override
  _i5.DiagnosticsNode describeForError(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#describeForError, [name]),
            returnValue: _FakeDiagnosticsNode_15(
              this,
              Invocation.method(#describeForError, [name]),
            ),
            returnValueForMissingStub: _FakeDiagnosticsNode_15(
              this,
              Invocation.method(#describeForError, [name]),
            ),
          )
          as _i5.DiagnosticsNode);

  @override
  void stop({bool? canceled = false}) => super.noSuchMethod(
    Invocation.method(#stop, [], {#canceled: canceled}),
    returnValueForMissingStub: null,
  );

  @override
  void scheduleTick({bool? rescheduling = false}) => super.noSuchMethod(
    Invocation.method(#scheduleTick, [], {#rescheduling: rescheduling}),
    returnValueForMissingStub: null,
  );

  @override
  void unscheduleTick() => super.noSuchMethod(
    Invocation.method(#unscheduleTick, []),
    returnValueForMissingStub: null,
  );

  @override
  void absorbTicker(_i12.Ticker? originalTicker) => super.noSuchMethod(
    Invocation.method(#absorbTicker, [originalTicker]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  String toString({bool? debugIncludeStack = false}) => super.toString();
}

/// A class which mocks [TickerProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockTickerProvider extends _i1.Mock implements _i5.TickerProvider {
  @override
  _i12.Ticker createTicker(_i12.TickerCallback? onTick) =>
      (super.noSuchMethod(
            Invocation.method(#createTicker, [onTick]),
            returnValue: _FakeTicker_16(
              this,
              Invocation.method(#createTicker, [onTick]),
            ),
            returnValueForMissingStub: _FakeTicker_16(
              this,
              Invocation.method(#createTicker, [onTick]),
            ),
          )
          as _i12.Ticker);
}

/// A class which mocks [BasePagedSheetRoute].
///
/// See the documentation for Mockito's code generation for more information.
class MockBasePagedSheetRoute<T> extends _i1.Mock
    implements _i18.BasePagedSheetRoute<T> {
  @override
  _i2.SheetAnchor get initialOffset =>
      (super.noSuchMethod(
            Invocation.getter(#initialOffset),
            returnValue: _FakeSheetAnchor_0(
              this,
              Invocation.getter(#initialOffset),
            ),
            returnValueForMissingStub: _FakeSheetAnchor_0(
              this,
              Invocation.getter(#initialOffset),
            ),
          )
          as _i2.SheetAnchor);

  @override
  _i2.SheetAnchor get minOffset =>
      (super.noSuchMethod(
            Invocation.getter(#minOffset),
            returnValue: _FakeSheetAnchor_0(
              this,
              Invocation.getter(#minOffset),
            ),
            returnValueForMissingStub: _FakeSheetAnchor_0(
              this,
              Invocation.getter(#minOffset),
            ),
          )
          as _i2.SheetAnchor);

  @override
  _i2.SheetAnchor get maxOffset =>
      (super.noSuchMethod(
            Invocation.getter(#maxOffset),
            returnValue: _FakeSheetAnchor_0(
              this,
              Invocation.getter(#maxOffset),
            ),
            returnValueForMissingStub: _FakeSheetAnchor_0(
              this,
              Invocation.getter(#maxOffset),
            ),
          )
          as _i2.SheetAnchor);

  @override
  _i6.SheetPhysics get physics =>
      (super.noSuchMethod(
            Invocation.getter(#physics),
            returnValue: _FakeSheetPhysics_6(this, Invocation.getter(#physics)),
            returnValueForMissingStub: _FakeSheetPhysics_6(
              this,
              Invocation.getter(#physics),
            ),
          )
          as _i6.SheetPhysics);

  @override
  bool get fullscreenDialog =>
      (super.noSuchMethod(
            Invocation.getter(#fullscreenDialog),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get allowSnapshotting =>
      (super.noSuchMethod(
            Invocation.getter(#allowSnapshotting),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get opaque =>
      (super.noSuchMethod(
            Invocation.getter(#opaque),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get barrierDismissible =>
      (super.noSuchMethod(
            Invocation.getter(#barrierDismissible),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get popGestureEnabled =>
      (super.noSuchMethod(
            Invocation.getter(#popGestureEnabled),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  set receivedTransition(_i5.DelegatedTransitionBuilder? _receivedTransition) =>
      super.noSuchMethod(
        Invocation.setter(#receivedTransition, _receivedTransition),
        returnValueForMissingStub: null,
      );

  @override
  bool get semanticsDismissible =>
      (super.noSuchMethod(
            Invocation.getter(#semanticsDismissible),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i5.Curve get barrierCurve =>
      (super.noSuchMethod(
            Invocation.getter(#barrierCurve),
            returnValue: _FakeCurve_17(this, Invocation.getter(#barrierCurve)),
            returnValueForMissingStub: _FakeCurve_17(
              this,
              Invocation.getter(#barrierCurve),
            ),
          )
          as _i5.Curve);

  @override
  bool get maintainState =>
      (super.noSuchMethod(
            Invocation.getter(#maintainState),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get popGestureInProgress =>
      (super.noSuchMethod(
            Invocation.getter(#popGestureInProgress),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get offstage =>
      (super.noSuchMethod(
            Invocation.getter(#offstage),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  set offstage(bool? value) => super.noSuchMethod(
    Invocation.setter(#offstage, value),
    returnValueForMissingStub: null,
  );

  @override
  _i5.RoutePopDisposition get popDisposition =>
      (super.noSuchMethod(
            Invocation.getter(#popDisposition),
            returnValue: _i5.RoutePopDisposition.pop,
            returnValueForMissingStub: _i5.RoutePopDisposition.pop,
          )
          as _i5.RoutePopDisposition);

  @override
  bool get hasScopedWillPopCallback =>
      (super.noSuchMethod(
            Invocation.getter(#hasScopedWillPopCallback),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get canPop =>
      (super.noSuchMethod(
            Invocation.getter(#canPop),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get impliesAppBarDismissal =>
      (super.noSuchMethod(
            Invocation.getter(#impliesAppBarDismissal),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get willDisposeAnimationController =>
      (super.noSuchMethod(
            Invocation.getter(#willDisposeAnimationController),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  set willDisposeAnimationController(bool? _willDisposeAnimationController) =>
      super.noSuchMethod(
        Invocation.setter(
          #willDisposeAnimationController,
          _willDisposeAnimationController,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.Future<T?> get completed =>
      (super.noSuchMethod(
            Invocation.getter(#completed),
            returnValue: _i10.Future<T?>.value(),
            returnValueForMissingStub: _i10.Future<T?>.value(),
          )
          as _i10.Future<T?>);

  @override
  Duration get transitionDuration =>
      (super.noSuchMethod(
            Invocation.getter(#transitionDuration),
            returnValue: _FakeDuration_18(
              this,
              Invocation.getter(#transitionDuration),
            ),
            returnValueForMissingStub: _FakeDuration_18(
              this,
              Invocation.getter(#transitionDuration),
            ),
          )
          as Duration);

  @override
  Duration get reverseTransitionDuration =>
      (super.noSuchMethod(
            Invocation.getter(#reverseTransitionDuration),
            returnValue: _FakeDuration_18(
              this,
              Invocation.getter(#reverseTransitionDuration),
            ),
            returnValueForMissingStub: _FakeDuration_18(
              this,
              Invocation.getter(#reverseTransitionDuration),
            ),
          )
          as Duration);

  @override
  bool get finishedWhenPopped =>
      (super.noSuchMethod(
            Invocation.getter(#finishedWhenPopped),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  String get debugLabel =>
      (super.noSuchMethod(
            Invocation.getter(#debugLabel),
            returnValue: _i17.dummyValue<String>(
              this,
              Invocation.getter(#debugLabel),
            ),
            returnValueForMissingStub: _i17.dummyValue<String>(
              this,
              Invocation.getter(#debugLabel),
            ),
          )
          as String);

  @override
  List<_i5.OverlayEntry> get overlayEntries =>
      (super.noSuchMethod(
            Invocation.getter(#overlayEntries),
            returnValue: <_i5.OverlayEntry>[],
            returnValueForMissingStub: <_i5.OverlayEntry>[],
          )
          as List<_i5.OverlayEntry>);

  @override
  bool get requestFocus =>
      (super.noSuchMethod(
            Invocation.getter(#requestFocus),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i5.RouteSettings get settings =>
      (super.noSuchMethod(
            Invocation.getter(#settings),
            returnValue: _FakeRouteSettings_19(
              this,
              Invocation.getter(#settings),
            ),
            returnValueForMissingStub: _FakeRouteSettings_19(
              this,
              Invocation.getter(#settings),
            ),
          )
          as _i5.RouteSettings);

  @override
  _i11.ValueListenable<String?> get restorationScopeId =>
      (super.noSuchMethod(
            Invocation.getter(#restorationScopeId),
            returnValue: _FakeValueListenable_20<String?>(
              this,
              Invocation.getter(#restorationScopeId),
            ),
            returnValueForMissingStub: _FakeValueListenable_20<String?>(
              this,
              Invocation.getter(#restorationScopeId),
            ),
          )
          as _i11.ValueListenable<String?>);

  @override
  bool get willHandlePopInternally =>
      (super.noSuchMethod(
            Invocation.getter(#willHandlePopInternally),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i10.Future<T?> get popped =>
      (super.noSuchMethod(
            Invocation.getter(#popped),
            returnValue: _i10.Future<T?>.value(),
            returnValueForMissingStub: _i10.Future<T?>.value(),
          )
          as _i10.Future<T?>);

  @override
  bool get isCurrent =>
      (super.noSuchMethod(
            Invocation.getter(#isCurrent),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isFirst =>
      (super.noSuchMethod(
            Invocation.getter(#isFirst),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasActiveRouteBelow =>
      (super.noSuchMethod(
            Invocation.getter(#hasActiveRouteBelow),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isActive =>
      (super.noSuchMethod(
            Invocation.getter(#isActive),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool canTransitionFrom(_i5.TransitionRoute<dynamic>? previousRoute) =>
      (super.noSuchMethod(
            Invocation.method(#canTransitionFrom, [previousRoute]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool canTransitionTo(_i5.TransitionRoute<dynamic>? nextRoute) =>
      (super.noSuchMethod(
            Invocation.method(#canTransitionTo, [nextRoute]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i5.Widget buildContent(
    _i5.BuildContext? context,
    _i5.Animation<double>? animation,
    _i5.Animation<double>? secondaryAnimation,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#buildContent, [
              context,
              animation,
              secondaryAnimation,
            ]),
            returnValue: _FakeWidget_21(
              this,
              Invocation.method(#buildContent, [
                context,
                animation,
                secondaryAnimation,
              ]),
            ),
            returnValueForMissingStub: _FakeWidget_21(
              this,
              Invocation.method(#buildContent, [
                context,
                animation,
                secondaryAnimation,
              ]),
            ),
          )
          as _i5.Widget);

  @override
  _i5.Widget buildPage(
    _i5.BuildContext? context,
    _i5.Animation<double>? animation,
    _i5.Animation<double>? secondaryAnimation,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#buildPage, [
              context,
              animation,
              secondaryAnimation,
            ]),
            returnValue: _FakeWidget_21(
              this,
              Invocation.method(#buildPage, [
                context,
                animation,
                secondaryAnimation,
              ]),
            ),
            returnValueForMissingStub: _FakeWidget_21(
              this,
              Invocation.method(#buildPage, [
                context,
                animation,
                secondaryAnimation,
              ]),
            ),
          )
          as _i5.Widget);

  @override
  _i5.Widget buildTransitions(
    _i5.BuildContext? context,
    _i5.Animation<double>? animation,
    _i5.Animation<double>? secondaryAnimation,
    _i5.Widget? child,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#buildTransitions, [
              context,
              animation,
              secondaryAnimation,
              child,
            ]),
            returnValue: _FakeWidget_21(
              this,
              Invocation.method(#buildTransitions, [
                context,
                animation,
                secondaryAnimation,
                child,
              ]),
            ),
            returnValueForMissingStub: _FakeWidget_21(
              this,
              Invocation.method(#buildTransitions, [
                context,
                animation,
                secondaryAnimation,
                child,
              ]),
            ),
          )
          as _i5.Widget);

  @override
  void setState(_i4.VoidCallback? fn) => super.noSuchMethod(
    Invocation.method(#setState, [fn]),
    returnValueForMissingStub: null,
  );

  @override
  void install() => super.noSuchMethod(
    Invocation.method(#install, []),
    returnValueForMissingStub: null,
  );

  @override
  _i5.TickerFuture didPush() =>
      (super.noSuchMethod(
            Invocation.method(#didPush, []),
            returnValue: _FakeTickerFuture_13(
              this,
              Invocation.method(#didPush, []),
            ),
            returnValueForMissingStub: _FakeTickerFuture_13(
              this,
              Invocation.method(#didPush, []),
            ),
          )
          as _i5.TickerFuture);

  @override
  void didAdd() => super.noSuchMethod(
    Invocation.method(#didAdd, []),
    returnValueForMissingStub: null,
  );

  @override
  _i10.Future<_i5.RoutePopDisposition> willPop() =>
      (super.noSuchMethod(
            Invocation.method(#willPop, []),
            returnValue: _i10.Future<_i5.RoutePopDisposition>.value(
              _i5.RoutePopDisposition.pop,
            ),
            returnValueForMissingStub:
                _i10.Future<_i5.RoutePopDisposition>.value(
                  _i5.RoutePopDisposition.pop,
                ),
          )
          as _i10.Future<_i5.RoutePopDisposition>);

  @override
  void onPopInvokedWithResult(bool? didPop, T? result) => super.noSuchMethod(
    Invocation.method(#onPopInvokedWithResult, [didPop, result]),
    returnValueForMissingStub: null,
  );

  @override
  void addScopedWillPopCallback(_i5.WillPopCallback? callback) =>
      super.noSuchMethod(
        Invocation.method(#addScopedWillPopCallback, [callback]),
        returnValueForMissingStub: null,
      );

  @override
  void removeScopedWillPopCallback(_i5.WillPopCallback? callback) =>
      super.noSuchMethod(
        Invocation.method(#removeScopedWillPopCallback, [callback]),
        returnValueForMissingStub: null,
      );

  @override
  void registerPopEntry(_i5.PopEntry<Object?>? popEntry) => super.noSuchMethod(
    Invocation.method(#registerPopEntry, [popEntry]),
    returnValueForMissingStub: null,
  );

  @override
  void unregisterPopEntry(_i5.PopEntry<Object?>? popEntry) =>
      super.noSuchMethod(
        Invocation.method(#unregisterPopEntry, [popEntry]),
        returnValueForMissingStub: null,
      );

  @override
  void didChangePrevious(_i5.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(
        Invocation.method(#didChangePrevious, [previousRoute]),
        returnValueForMissingStub: null,
      );

  @override
  void didChangeNext(_i5.Route<dynamic>? nextRoute) => super.noSuchMethod(
    Invocation.method(#didChangeNext, [nextRoute]),
    returnValueForMissingStub: null,
  );

  @override
  void didPopNext(_i5.Route<dynamic>? nextRoute) => super.noSuchMethod(
    Invocation.method(#didPopNext, [nextRoute]),
    returnValueForMissingStub: null,
  );

  @override
  void changedInternalState() => super.noSuchMethod(
    Invocation.method(#changedInternalState, []),
    returnValueForMissingStub: null,
  );

  @override
  void changedExternalState() => super.noSuchMethod(
    Invocation.method(#changedExternalState, []),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Widget buildModalBarrier() =>
      (super.noSuchMethod(
            Invocation.method(#buildModalBarrier, []),
            returnValue: _FakeWidget_21(
              this,
              Invocation.method(#buildModalBarrier, []),
            ),
            returnValueForMissingStub: _FakeWidget_21(
              this,
              Invocation.method(#buildModalBarrier, []),
            ),
          )
          as _i5.Widget);

  @override
  Iterable<_i5.OverlayEntry> createOverlayEntries() =>
      (super.noSuchMethod(
            Invocation.method(#createOverlayEntries, []),
            returnValue: <_i5.OverlayEntry>[],
            returnValueForMissingStub: <_i5.OverlayEntry>[],
          )
          as Iterable<_i5.OverlayEntry>);

  @override
  _i5.AnimationController createAnimationController() =>
      (super.noSuchMethod(
            Invocation.method(#createAnimationController, []),
            returnValue: _FakeAnimationController_22(
              this,
              Invocation.method(#createAnimationController, []),
            ),
            returnValueForMissingStub: _FakeAnimationController_22(
              this,
              Invocation.method(#createAnimationController, []),
            ),
          )
          as _i5.AnimationController);

  @override
  _i5.Animation<double> createAnimation() =>
      (super.noSuchMethod(
            Invocation.method(#createAnimation, []),
            returnValue: _FakeAnimation_12<double>(
              this,
              Invocation.method(#createAnimation, []),
            ),
            returnValueForMissingStub: _FakeAnimation_12<double>(
              this,
              Invocation.method(#createAnimation, []),
            ),
          )
          as _i5.Animation<double>);

  @override
  void didReplace(_i5.Route<dynamic>? oldRoute) => super.noSuchMethod(
    Invocation.method(#didReplace, [oldRoute]),
    returnValueForMissingStub: null,
  );

  @override
  bool didPop(T? result) =>
      (super.noSuchMethod(
            Invocation.method(#didPop, [result]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void handleStartBackGesture({double? progress = 0.0}) => super.noSuchMethod(
    Invocation.method(#handleStartBackGesture, [], {#progress: progress}),
    returnValueForMissingStub: null,
  );

  @override
  void handleUpdateBackGestureProgress({required double? progress}) =>
      super.noSuchMethod(
        Invocation.method(#handleUpdateBackGestureProgress, [], {
          #progress: progress,
        }),
        returnValueForMissingStub: null,
      );

  @override
  void handleCancelBackGesture() => super.noSuchMethod(
    Invocation.method(#handleCancelBackGesture, []),
    returnValueForMissingStub: null,
  );

  @override
  void handleCommitBackGesture() => super.noSuchMethod(
    Invocation.method(#handleCommitBackGesture, []),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void onPopInvoked(bool? didPop) => super.noSuchMethod(
    Invocation.method(#onPopInvoked, [didPop]),
    returnValueForMissingStub: null,
  );

  @override
  void didComplete(T? result) => super.noSuchMethod(
    Invocation.method(#didComplete, [result]),
    returnValueForMissingStub: null,
  );

  @override
  void addLocalHistoryEntry(_i5.LocalHistoryEntry? entry) => super.noSuchMethod(
    Invocation.method(#addLocalHistoryEntry, [entry]),
    returnValueForMissingStub: null,
  );

  @override
  void removeLocalHistoryEntry(_i5.LocalHistoryEntry? entry) =>
      super.noSuchMethod(
        Invocation.method(#removeLocalHistoryEntry, [entry]),
        returnValueForMissingStub: null,
      );
}
