---
description: Instruction of creating a GitHub pull request from CLI
globs: 
alwaysApply: false
---
# Create a GitHub Pull Request from the CLI

First, after reviewing this file, please confirm by saying: "I have reviewed the pull request creation procedure file!"

## Review the Working Tree

- Check the current branch. If it is `main`, create a new branch for your changes.
  - You can use `git branch` command to see the current branch.
- If there are uncomitted changes, DO ask the user how to handle them before commiting.
- Ensure that the commit message follows the Conventional Commits fomrat.
- Use the following command to view the differences from the `main` branch:  
  - `git diff origin/main...HEAD | cat`

## Create and Open a Pull Request in the Browser

- Use the command below to create a pull request and automatically open it in your browser.
- Set the PR title and body appropriately, based on the differences from the target branch.
- Unless otherwise instructed, create the pull request as a draft.
- Create a temporary file to compose the PR body.

```bash
# Create a PR
git push origin HEAD && \
gh pr create --draft --title "{{PR Title}}" --body-file pr_body.txt && \
gh pr view --web
```

- Clearly separate each section.
- Include all necessary information without omissions.

### PR Template

Ensure that the pull request description follows the format defined in @.github/pull_request_template.md.
Below is an example of a well-structured pull request description. Please use it as a reference.

```
## Problem / Issue

Fixes #305.

When using `PagedSheet` with the `builder` parameter to construct a layout (e.g., using `SheetContentScaffold`) that includes shared elements like a top or bottom bar (`topBar`, `bottomBar`), dragging the sheet by initiating the gesture on these shared bars does not work.

The root cause is that the `PagedSheet` widget normally relies on its individual routes (`PagedSheetRoute`/`PagedSheetPage`) to wrap their content with the necessary `SheetDraggable` logic. When the `builder` is used, it inserts the shared bars *outside* the scope of the route's content, placing them visually on top. These bars then intercept the pointer events, preventing the underlying `SheetDraggable` (associated with the route's content) from receiving the drag gesture.

## Solution

This PR addresses the issue by ensuring that the entire widget tree constructed by the `PagedSheet.builder` is draggable.

1.  **Wrap Builder Output:** The `PagedSheet.build` method is modified. If the `builder` parameter is provided, the widget returned by the builder is now explicitly wrapped with `SheetDraggable(behavior: HitTestBehavior.translucent, child: ...)`.
2.  **Enable Bar Dragging:** This wrapper ensures that pointer events originating on the shared bars (which are part of the builder's output) are correctly handled by the sheet's dragging mechanism. The `HitTestBehavior.translucent` allows events to pass through to the underlying content if needed, while still allowing the bars themselves to initiate a drag.

This ensures that dragging the sheet works consistently, regardless of whether the gesture starts on the main content area provided by the route or on the shared bars added by the `PagedSheet.builder`. The accompanying regression test, which specifically reproduces the scenario with shared bars, now passes.
```
