#!/bin/bash

###################################################################
# 
# Pattern Checker Script
#
# This script is a utility for scanning files for disallowed patterns.
# It accepts a list of file patterns and a list of disallowed patterns as arguments,
# and scans all files matching the file patterns for the disallowed patterns.
#
# Usage:
# ./pattern_checker.sh [file patterns] -- [disallowed patterns]
#
# Parameters:
# [file patterns]: A list of file patterns to scan. Each pattern should be quoted and separated by a space. For example, "*.dart" "*.txt".
# [disallowed patterns]: A list of disallowed patterns to search for in the files. Each pattern should be quoted and separated by a space. For example, "pattern1" "pattern2".
# The -- argument is used to separate the file patterns from the disallowed patterns.
#
# Example:
# ./pattern_checker.sh "*.dart" "*.txt" -- "pattern1" "pattern2"
# This command will scan all .dart and .txt files for the patterns pattern1 and pattern2.
#
# Output:
# If a disallowed pattern is found in a file, the script will print the filename,
# line number, and the matching line. If any disallowed patterns are found,
# the script will exit with a status of 1.
# If no disallowed patterns are found, the script will exit with a status of 0.
#
# Author:
# This script and the documentation above was fully generated by GitHub Copilot AI.
#
###################################################################

# Arrays to hold file patterns and disallowed patterns
file_patterns=()
disallowed_patterns=()

# Flag to track if we're still reading file patterns
reading_patterns=1

# Loop over each argument
for arg in "$@"; do
  # If we encounter the delimiter, stop reading file patterns
  if [[ $arg == "--" ]]; then
    reading_patterns=0
  # If we're still reading file patterns
  elif [[ $reading_patterns -eq 1 ]]; then
    file_patterns+=("$arg")
  # If we're reading disallowed patterns
  else
    disallowed_patterns+=("$arg")
  fi
done

# Flag to track if any disallowed pattern is found
error_found=0

# Loop over each file pattern
for file_pattern in "${file_patterns[@]}"; do
  # Find files matching the pattern
  files=$(find . -name "$file_pattern")

  # Loop over each file
  for file in $files; do
    # Loop over each disallowed pattern
    for pattern in "${disallowed_patterns[@]}"; do
      # Search for the pattern in the file
      result=$(grep -n "$pattern" "$file")

      # If a match is found
      if [[ $result ]]; then
        # Set the error flag
        error_found=1

        # Print the filename, line number, and matching line
        echo "\nDisallowed pattern found in file: $file"
        echo "$result"
      fi
    done
  done
done

# If any disallowed pattern was found, exit with status 1
if [[ $error_found -eq 1 ]]; then
  exit 1
fi

# If no disallowed pattern was found, exit with status 0
exit 0
